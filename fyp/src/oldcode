#!/usr/bin/env python
import rospy
from std_msgs.msg import String

#Astar callback, just print the data for now
def astarCallback(data):
    rospy.loginfo("Astar directions: " +str(data.data))

def talker():
    global counter
    global cars



    # Initialize ros node fyp
    rospy.init_node('fyp', anonymous=False)
    # initialize our topics
    pub_RouteN = rospy.Publisher('route_number', String, queue_size=10)
    # Initialize rate 10hz
    rate = rospy.Rate(10)



    # Inifinite loop
    while not rospy.is_shutdown():
        # Pubblish a dummy data for now, this will publish the route that we are going to need
        pub_RouteN.publish("1")
        # Show me the route
        rospy.loginfo("Route 1")
        # Sleep for 10hz
        rate.sleep()

rospy.Subscriber('shortest_path', String, astarCallback)



if __name__ == '__main__':
    try:
        talker()
    except rospy.ROSInterruptException:
        pass









        copter = pf.DroneMaster()
        functionList = (
            ('move_right_left', 0.5),
            ('move_left_right', 0.5),
            ('move_up_down', 0.3),
            ('move_down_up', 0.3),
            ('move_yaw_left_right', 5),
            ('move_yaw_right_left', 5)
        )



        copter.takeoff()
        time.sleep(5)
        copter.clear()
        copter.goTo(0.5, 0.00, 0.00, 0.02)
        rospy.loginfo('x=' + str(round(copter.x, 3)) + '; y=' + str(round(copter.y, 3)) + '; z=' + str(round(copter.z, 3)))

        #rospy.loginfo("Go Back ")
        #copter.goTo(0.00, 0.00, 0.00, 0.02)

        if 1.00 <= copter.x  <= 1.10:
            copter.land()














        #time.sleep(2)
        #copter.land()



       # if controller.status == DroneStatus.Emergency:
        #    controller.SendEmergency()
        """
        rospy.loginfo("ready!")
        rospy.sleep(1.0)

        rospy.loginfo("takeoff..")
        pub_takeoff.publish(Empty())

        rospy.loginfo("move x positive")

        command.linear.x = 1
        pub_position.publish(command)

        rospy.sleep(2.0)

        rospy.loginfo("land..")
        pub_land.publish(Empty())

        rospy.loginfo("done!")

        elif controller.status == DroneStatus.Flying or controller.status == DroneStatus.GotoHover or controller.status == DroneStatus.Hovering:
            rospy.loginfo("Drone is flying")
            time.sleep(2)
            controller.SendEmergency()


        controller.SendTakeoff()
        time.sleep(4)

        if controller.status == DroneStatus.Flying or controller.status == DroneStatus.GotoHover or controller.status == DroneStatus.Hovering:
            command = Twist()
            command.linear.x = 0
            command.linear.y = 0
            command.linear.z = 1

            command.angular.x = 0
            command.angular.y = 0
            command.angular.z = 0
            pub_position.publish(command)

            # rospy.loginfo("Sending__ " + str(command))

            for x in range(0, 9):
                command.linear.x += 0.1
                #command.angular.z += 0.1
                rospy.loginfo("Sending command: " + str(command))
                pub_position.publish(command)
                time.sleep(1)

            rospy.loginfo("Sending__emergency ")
            controller.SendEmergency()


"""