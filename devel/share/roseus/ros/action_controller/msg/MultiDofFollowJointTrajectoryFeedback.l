;; Auto-generated. Do not edit!


(when (boundp 'action_controller::MultiDofFollowJointTrajectoryFeedback)
  (if (not (find-package "ACTION_CONTROLLER"))
    (make-package "ACTION_CONTROLLER"))
  (shadow 'MultiDofFollowJointTrajectoryFeedback (find-package "ACTION_CONTROLLER")))
(unless (find-package "ACTION_CONTROLLER::MULTIDOFFOLLOWJOINTTRAJECTORYFEEDBACK")
  (make-package "ACTION_CONTROLLER::MULTIDOFFOLLOWJOINTTRAJECTORYFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude MultiDofFollowJointTrajectoryFeedback.msg.html
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))
(if (not (find-package "TRAJECTORY_MSGS"))
  (ros::roseus-add-msgs "trajectory_msgs"))


(defclass action_controller::MultiDofFollowJointTrajectoryFeedback
  :super ros::object
  :slots (_header _joint_names _desired _actual _error ))

(defmethod action_controller::MultiDofFollowJointTrajectoryFeedback
  (:init
   (&key
    ((:header __header) (instance std_msgs::Header :init))
    ((:joint_names __joint_names) (let (r) (dotimes (i 0) (push "" r)) r))
    ((:desired __desired) (instance trajectory_msgs::MultiDOFJointTrajectoryPoint :init))
    ((:actual __actual) (instance trajectory_msgs::MultiDOFJointTrajectoryPoint :init))
    ((:error __error) (instance trajectory_msgs::MultiDOFJointTrajectoryPoint :init))
    )
   (send-super :init)
   (setq _header __header)
   (setq _joint_names __joint_names)
   (setq _desired __desired)
   (setq _actual __actual)
   (setq _error __error)
   self)
  (:header
   (&rest __header)
   (if (keywordp (car __header))
       (send* _header __header)
     (progn
       (if __header (setq _header (car __header)))
       _header)))
  (:joint_names
   (&optional __joint_names)
   (if __joint_names (setq _joint_names __joint_names)) _joint_names)
  (:desired
   (&rest __desired)
   (if (keywordp (car __desired))
       (send* _desired __desired)
     (progn
       (if __desired (setq _desired (car __desired)))
       _desired)))
  (:actual
   (&rest __actual)
   (if (keywordp (car __actual))
       (send* _actual __actual)
     (progn
       (if __actual (setq _actual (car __actual)))
       _actual)))
  (:error
   (&rest __error)
   (if (keywordp (car __error))
       (send* _error __error)
     (progn
       (if __error (setq _error (car __error)))
       _error)))
  (:serialization-length
   ()
   (+
    ;; std_msgs/Header _header
    (send _header :serialization-length)
    ;; string[] _joint_names
    (apply #'+ (mapcar #'(lambda (x) (+ 4 (length x))) _joint_names)) 4
    ;; trajectory_msgs/MultiDOFJointTrajectoryPoint _desired
    (send _desired :serialization-length)
    ;; trajectory_msgs/MultiDOFJointTrajectoryPoint _actual
    (send _actual :serialization-length)
    ;; trajectory_msgs/MultiDOFJointTrajectoryPoint _error
    (send _error :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; std_msgs/Header _header
       (send _header :serialize s)
     ;; string[] _joint_names
     (write-long (length _joint_names) s)
     (dolist (elem _joint_names)
       (write-long (length elem) s) (princ elem s)
       )
     ;; trajectory_msgs/MultiDOFJointTrajectoryPoint _desired
       (send _desired :serialize s)
     ;; trajectory_msgs/MultiDOFJointTrajectoryPoint _actual
       (send _actual :serialize s)
     ;; trajectory_msgs/MultiDOFJointTrajectoryPoint _error
       (send _error :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; std_msgs/Header _header
     (send _header :deserialize buf ptr-) (incf ptr- (send _header :serialization-length))
   ;; string[] _joint_names
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _joint_names (make-list n))
     (dotimes (i n)
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setf (elt _joint_names i) (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
     ))
   ;; trajectory_msgs/MultiDOFJointTrajectoryPoint _desired
     (send _desired :deserialize buf ptr-) (incf ptr- (send _desired :serialization-length))
   ;; trajectory_msgs/MultiDOFJointTrajectoryPoint _actual
     (send _actual :deserialize buf ptr-) (incf ptr- (send _actual :serialization-length))
   ;; trajectory_msgs/MultiDOFJointTrajectoryPoint _error
     (send _error :deserialize buf ptr-) (incf ptr- (send _error :serialization-length))
   ;;
   self)
  )

(setf (get action_controller::MultiDofFollowJointTrajectoryFeedback :md5sum-) "8c3426246094babe60db855c2a9503c7")
(setf (get action_controller::MultiDofFollowJointTrajectoryFeedback :datatype-) "action_controller/MultiDofFollowJointTrajectoryFeedback")
(setf (get action_controller::MultiDofFollowJointTrajectoryFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
Header header
string[] joint_names
trajectory_msgs/MultiDOFJointTrajectoryPoint desired
trajectory_msgs/MultiDOFJointTrajectoryPoint actual
trajectory_msgs/MultiDOFJointTrajectoryPoint error


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectoryPoint
# Each multi-dof joint can specify a transform (up to 6 DOF)
geometry_msgs/Transform[] transforms

# There can be a velocity specified for the origin of the joint 
geometry_msgs/Twist[] velocities

# There can be an acceleration specified for the origin of the joint 
geometry_msgs/Twist[] accelerations

duration time_from_start

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

")



(provide :action_controller/MultiDofFollowJointTrajectoryFeedback "8c3426246094babe60db855c2a9503c7")


