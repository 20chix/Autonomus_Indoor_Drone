//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the lsd_slam_viewer package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __lsd_slam_viewer__LSDSLAMVIEWERPARAMSCONFIG_H__
#define __lsd_slam_viewer__LSDSLAMVIEWERPARAMSCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace lsd_slam_viewer
{
  class LSDSLAMViewerParamsConfigStatics;

  class LSDSLAMViewerParamsConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(LSDSLAMViewerParamsConfig &config, const LSDSLAMViewerParamsConfig &max, const LSDSLAMViewerParamsConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const LSDSLAMViewerParamsConfig &config1, const LSDSLAMViewerParamsConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, LSDSLAMViewerParamsConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const LSDSLAMViewerParamsConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, LSDSLAMViewerParamsConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const LSDSLAMViewerParamsConfig &config) const = 0;
      virtual void getValue(const LSDSLAMViewerParamsConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T LSDSLAMViewerParamsConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (LSDSLAMViewerParamsConfig::* field);

      virtual void clamp(LSDSLAMViewerParamsConfig &config, const LSDSLAMViewerParamsConfig &max, const LSDSLAMViewerParamsConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const LSDSLAMViewerParamsConfig &config1, const LSDSLAMViewerParamsConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, LSDSLAMViewerParamsConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const LSDSLAMViewerParamsConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, LSDSLAMViewerParamsConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const LSDSLAMViewerParamsConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const LSDSLAMViewerParamsConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, LSDSLAMViewerParamsConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, LSDSLAMViewerParamsConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<LSDSLAMViewerParamsConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(LSDSLAMViewerParamsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("showKFCameras"==(*_i)->name){showKFCameras = boost::any_cast<bool>(val);}
        if("showKFPointclouds"==(*_i)->name){showKFPointclouds = boost::any_cast<bool>(val);}
        if("showConstraints"==(*_i)->name){showConstraints = boost::any_cast<bool>(val);}
        if("showCurrentCamera"==(*_i)->name){showCurrentCamera = boost::any_cast<bool>(val);}
        if("showCurrentPointcloud"==(*_i)->name){showCurrentPointcloud = boost::any_cast<bool>(val);}
        if("pointTesselation"==(*_i)->name){pointTesselation = boost::any_cast<double>(val);}
        if("lineTesselation"==(*_i)->name){lineTesselation = boost::any_cast<double>(val);}
        if("scaledDepthVarTH"==(*_i)->name){scaledDepthVarTH = boost::any_cast<double>(val);}
        if("absDepthVarTH"==(*_i)->name){absDepthVarTH = boost::any_cast<double>(val);}
        if("minNearSupport"==(*_i)->name){minNearSupport = boost::any_cast<int>(val);}
        if("cutFirstNKf"==(*_i)->name){cutFirstNKf = boost::any_cast<int>(val);}
        if("sparsifyFactor"==(*_i)->name){sparsifyFactor = boost::any_cast<int>(val);}
        if("saveAllVideo"==(*_i)->name){saveAllVideo = boost::any_cast<bool>(val);}
        if("keepInMemory"==(*_i)->name){keepInMemory = boost::any_cast<bool>(val);}
      }
    }

    bool showKFCameras;
bool showKFPointclouds;
bool showConstraints;
bool showCurrentCamera;
bool showCurrentPointcloud;
double pointTesselation;
double lineTesselation;
double scaledDepthVarTH;
double absDepthVarTH;
int minNearSupport;
int cutFirstNKf;
int sparsifyFactor;
bool saveAllVideo;
bool keepInMemory;

    bool state;
    std::string name;

    
}groups;



//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool showKFCameras;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool showKFPointclouds;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool showConstraints;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool showCurrentCamera;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool showCurrentPointcloud;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double pointTesselation;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double lineTesselation;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double scaledDepthVarTH;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double absDepthVarTH;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int minNearSupport;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int cutFirstNKf;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int sparsifyFactor;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool saveAllVideo;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool keepInMemory;
//#line 228 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("LSDSLAMViewerParamsConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const LSDSLAMViewerParamsConfig &__max__ = __getMax__();
      const LSDSLAMViewerParamsConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const LSDSLAMViewerParamsConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const LSDSLAMViewerParamsConfig &__getDefault__();
    static const LSDSLAMViewerParamsConfig &__getMax__();
    static const LSDSLAMViewerParamsConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const LSDSLAMViewerParamsConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void LSDSLAMViewerParamsConfig::ParamDescription<std::string>::clamp(LSDSLAMViewerParamsConfig &config, const LSDSLAMViewerParamsConfig &max, const LSDSLAMViewerParamsConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class LSDSLAMViewerParamsConfigStatics
  {
    friend class LSDSLAMViewerParamsConfig;

    LSDSLAMViewerParamsConfigStatics()
    {
LSDSLAMViewerParamsConfig::GroupDescription<LSDSLAMViewerParamsConfig::DEFAULT, LSDSLAMViewerParamsConfig> Default("Default", "", 0, 0, true, &LSDSLAMViewerParamsConfig::groups);
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.showKFCameras = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.showKFCameras = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.showKFCameras = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("showKFCameras", "bool", 0, "Toggle Drawing of blue Keyframe Camera-Frustrums", "", &LSDSLAMViewerParamsConfig::showKFCameras)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("showKFCameras", "bool", 0, "Toggle Drawing of blue Keyframe Camera-Frustrums", "", &LSDSLAMViewerParamsConfig::showKFCameras)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.showKFPointclouds = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.showKFPointclouds = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.showKFPointclouds = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("showKFPointclouds", "bool", 0, "Toggle Drawing of Pointclouds for all Keyframes", "", &LSDSLAMViewerParamsConfig::showKFPointclouds)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("showKFPointclouds", "bool", 0, "Toggle Drawing of Pointclouds for all Keyframes", "", &LSDSLAMViewerParamsConfig::showKFPointclouds)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.showConstraints = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.showConstraints = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.showConstraints = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("showConstraints", "bool", 0, "Toggle Drawing of red/green Pose-Graph Constraints", "", &LSDSLAMViewerParamsConfig::showConstraints)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("showConstraints", "bool", 0, "Toggle Drawing of red/green Pose-Graph Constraints", "", &LSDSLAMViewerParamsConfig::showConstraints)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.showCurrentCamera = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.showCurrentCamera = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.showCurrentCamera = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("showCurrentCamera", "bool", 0, "Toggle Drawing of red Frustrum for the current Camera Pose", "", &LSDSLAMViewerParamsConfig::showCurrentCamera)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("showCurrentCamera", "bool", 0, "Toggle Drawing of red Frustrum for the current Camera Pose", "", &LSDSLAMViewerParamsConfig::showCurrentCamera)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.showCurrentPointcloud = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.showCurrentPointcloud = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.showCurrentPointcloud = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("showCurrentPointcloud", "bool", 0, "Toggle Drawing of the latest pointcloud added to the map", "", &LSDSLAMViewerParamsConfig::showCurrentPointcloud)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("showCurrentPointcloud", "bool", 0, "Toggle Drawing of the latest pointcloud added to the map", "", &LSDSLAMViewerParamsConfig::showCurrentPointcloud)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pointTesselation = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pointTesselation = 5.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pointTesselation = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<double>("pointTesselation", "double", 0, "Size of Points", "", &LSDSLAMViewerParamsConfig::pointTesselation)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<double>("pointTesselation", "double", 0, "Size of Points", "", &LSDSLAMViewerParamsConfig::pointTesselation)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.lineTesselation = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.lineTesselation = 5.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.lineTesselation = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<double>("lineTesselation", "double", 0, "Width of Lines", "", &LSDSLAMViewerParamsConfig::lineTesselation)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<double>("lineTesselation", "double", 0, "Width of Lines", "", &LSDSLAMViewerParamsConfig::lineTesselation)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.scaledDepthVarTH = -10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.scaledDepthVarTH = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.scaledDepthVarTH = -3.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<double>("scaledDepthVarTH", "double", 0, "log10 of threshold on point's variance, in the respective keyframe's scale. ", "", &LSDSLAMViewerParamsConfig::scaledDepthVarTH)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<double>("scaledDepthVarTH", "double", 0, "log10 of threshold on point's variance, in the respective keyframe's scale. ", "", &LSDSLAMViewerParamsConfig::scaledDepthVarTH)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.absDepthVarTH = -10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.absDepthVarTH = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.absDepthVarTH = -1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<double>("absDepthVarTH", "double", 0, "log10 of threshold on point's variance, in absolute scale.", "", &LSDSLAMViewerParamsConfig::absDepthVarTH)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<double>("absDepthVarTH", "double", 0, "log10 of threshold on point's variance, in absolute scale.", "", &LSDSLAMViewerParamsConfig::absDepthVarTH)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.minNearSupport = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.minNearSupport = 9;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.minNearSupport = 7;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<int>("minNearSupport", "int", 0, "only plot points that have #minNearSupport similar neighbours (higher values remove outliers)", "", &LSDSLAMViewerParamsConfig::minNearSupport)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<int>("minNearSupport", "int", 0, "only plot points that have #minNearSupport similar neighbours (higher values remove outliers)", "", &LSDSLAMViewerParamsConfig::minNearSupport)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cutFirstNKf = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cutFirstNKf = 100;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cutFirstNKf = 5;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<int>("cutFirstNKf", "int", 0, "do not display the first #cutFirstNKf keyframe's pointclouds, to remove artifacts left-over from the random initialization.", "", &LSDSLAMViewerParamsConfig::cutFirstNKf)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<int>("cutFirstNKf", "int", 0, "do not display the first #cutFirstNKf keyframe's pointclouds, to remove artifacts left-over from the random initialization.", "", &LSDSLAMViewerParamsConfig::cutFirstNKf)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sparsifyFactor = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sparsifyFactor = 100;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sparsifyFactor = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<int>("sparsifyFactor", "int", 0, "only plot one out of #sparsifyFactor points, selected at random. Use this to significantly speed up rendering for large maps.", "", &LSDSLAMViewerParamsConfig::sparsifyFactor)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<int>("sparsifyFactor", "int", 0, "only plot one out of #sparsifyFactor points, selected at random. Use this to significantly speed up rendering for large maps.", "", &LSDSLAMViewerParamsConfig::sparsifyFactor)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.saveAllVideo = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.saveAllVideo = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.saveAllVideo = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("saveAllVideo", "bool", 0, "save all rendered images... only use if you know what you are doing.", "", &LSDSLAMViewerParamsConfig::saveAllVideo)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("saveAllVideo", "bool", 0, "save all rendered images... only use if you know what you are doing.", "", &LSDSLAMViewerParamsConfig::saveAllVideo)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.keepInMemory = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.keepInMemory = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.keepInMemory = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("keepInMemory", "bool", 0, "If set to false, Pointcloud is only stored in OpenGL buffers, and not kept in RAM. This greatly reduces the required RAM for large maps, however also prohibits saving / dynamically changing sparsifyFactor and variance-thresholds.", "", &LSDSLAMViewerParamsConfig::keepInMemory)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr(new LSDSLAMViewerParamsConfig::ParamDescription<bool>("keepInMemory", "bool", 0, "If set to false, Pointcloud is only stored in OpenGL buffers, and not kept in RAM. This greatly reduces the required RAM for large maps, however also prohibits saving / dynamically changing sparsifyFactor and variance-thresholds.", "", &LSDSLAMViewerParamsConfig::keepInMemory)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(LSDSLAMViewerParamsConfig::AbstractGroupDescriptionConstPtr(new LSDSLAMViewerParamsConfig::GroupDescription<LSDSLAMViewerParamsConfig::DEFAULT, LSDSLAMViewerParamsConfig>(Default)));
//#line 366 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<LSDSLAMViewerParamsConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<LSDSLAMViewerParamsConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    LSDSLAMViewerParamsConfig __max__;
    LSDSLAMViewerParamsConfig __min__;
    LSDSLAMViewerParamsConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const LSDSLAMViewerParamsConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static LSDSLAMViewerParamsConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &LSDSLAMViewerParamsConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const LSDSLAMViewerParamsConfig &LSDSLAMViewerParamsConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const LSDSLAMViewerParamsConfig &LSDSLAMViewerParamsConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const LSDSLAMViewerParamsConfig &LSDSLAMViewerParamsConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<LSDSLAMViewerParamsConfig::AbstractParamDescriptionConstPtr> &LSDSLAMViewerParamsConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<LSDSLAMViewerParamsConfig::AbstractGroupDescriptionConstPtr> &LSDSLAMViewerParamsConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const LSDSLAMViewerParamsConfigStatics *LSDSLAMViewerParamsConfig::__get_statics__()
  {
    const static LSDSLAMViewerParamsConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = LSDSLAMViewerParamsConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __LSDSLAMVIEWERPARAMSRECONFIGURATOR_H__
