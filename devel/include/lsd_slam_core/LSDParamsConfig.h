//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the lsd_slam_core package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __lsd_slam_core__LSDPARAMSCONFIG_H__
#define __lsd_slam_core__LSDPARAMSCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace lsd_slam_core
{
  class LSDParamsConfigStatics;

  class LSDParamsConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(LSDParamsConfig &config, const LSDParamsConfig &max, const LSDParamsConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const LSDParamsConfig &config1, const LSDParamsConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, LSDParamsConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const LSDParamsConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, LSDParamsConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const LSDParamsConfig &config) const = 0;
      virtual void getValue(const LSDParamsConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T LSDParamsConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (LSDParamsConfig::* field);

      virtual void clamp(LSDParamsConfig &config, const LSDParamsConfig &max, const LSDParamsConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const LSDParamsConfig &config1, const LSDParamsConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, LSDParamsConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const LSDParamsConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, LSDParamsConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const LSDParamsConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const LSDParamsConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, LSDParamsConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, LSDParamsConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<LSDParamsConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(LSDParamsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("minUseGrad"==(*_i)->name){minUseGrad = boost::any_cast<double>(val);}
        if("cameraPixelNoise"==(*_i)->name){cameraPixelNoise = boost::any_cast<double>(val);}
        if("KFUsageWeight"==(*_i)->name){KFUsageWeight = boost::any_cast<double>(val);}
        if("KFDistWeight"==(*_i)->name){KFDistWeight = boost::any_cast<double>(val);}
        if("doSLAM"==(*_i)->name){doSLAM = boost::any_cast<bool>(val);}
        if("doKFReActivation"==(*_i)->name){doKFReActivation = boost::any_cast<bool>(val);}
        if("doMapping"==(*_i)->name){doMapping = boost::any_cast<bool>(val);}
        if("useFabMap"==(*_i)->name){useFabMap = boost::any_cast<bool>(val);}
        if("allowNegativeIdepths"==(*_i)->name){allowNegativeIdepths = boost::any_cast<bool>(val);}
        if("useSubpixelStereo"==(*_i)->name){useSubpixelStereo = boost::any_cast<bool>(val);}
        if("useAffineLightningEstimation"==(*_i)->name){useAffineLightningEstimation = boost::any_cast<bool>(val);}
        if("multiThreading"==(*_i)->name){multiThreading = boost::any_cast<bool>(val);}
        if("maxLoopClosureCandidates"==(*_i)->name){maxLoopClosureCandidates = boost::any_cast<int>(val);}
        if("loopclosureStrictness"==(*_i)->name){loopclosureStrictness = boost::any_cast<double>(val);}
        if("relocalizationTH"==(*_i)->name){relocalizationTH = boost::any_cast<double>(val);}
        if("depthSmoothingFactor"==(*_i)->name){depthSmoothingFactor = boost::any_cast<double>(val);}
      }
    }

    double minUseGrad;
double cameraPixelNoise;
double KFUsageWeight;
double KFDistWeight;
bool doSLAM;
bool doKFReActivation;
bool doMapping;
bool useFabMap;
bool allowNegativeIdepths;
bool useSubpixelStereo;
bool useAffineLightningEstimation;
bool multiThreading;
int maxLoopClosureCandidates;
double loopclosureStrictness;
double relocalizationTH;
double depthSmoothingFactor;

    bool state;
    std::string name;

    
}groups;



//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double minUseGrad;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cameraPixelNoise;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double KFUsageWeight;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double KFDistWeight;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool doSLAM;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool doKFReActivation;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool doMapping;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool useFabMap;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool allowNegativeIdepths;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool useSubpixelStereo;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool useAffineLightningEstimation;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool multiThreading;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int maxLoopClosureCandidates;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double loopclosureStrictness;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double relocalizationTH;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double depthSmoothingFactor;
//#line 228 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("LSDParamsConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const LSDParamsConfig &__max__ = __getMax__();
      const LSDParamsConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const LSDParamsConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const LSDParamsConfig &__getDefault__();
    static const LSDParamsConfig &__getMax__();
    static const LSDParamsConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const LSDParamsConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void LSDParamsConfig::ParamDescription<std::string>::clamp(LSDParamsConfig &config, const LSDParamsConfig &max, const LSDParamsConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class LSDParamsConfigStatics
  {
    friend class LSDParamsConfig;

    LSDParamsConfigStatics()
    {
LSDParamsConfig::GroupDescription<LSDParamsConfig::DEFAULT, LSDParamsConfig> Default("Default", "", 0, 0, true, &LSDParamsConfig::groups);
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.minUseGrad = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.minUseGrad = 50.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.minUseGrad = 5.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("minUseGrad", "double", 0, "Minimal Absolut Image Gradient for a Pixel to be used at all. Increase, if your camera has large image noise, Decrease if you have low image-noise and want to also exploit small gradients.", "", &LSDParamsConfig::minUseGrad)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("minUseGrad", "double", 0, "Minimal Absolut Image Gradient for a Pixel to be used at all. Increase, if your camera has large image noise, Decrease if you have low image-noise and want to also exploit small gradients.", "", &LSDParamsConfig::minUseGrad)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cameraPixelNoise = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cameraPixelNoise = 50.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cameraPixelNoise = 4.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("cameraPixelNoise", "double", 0, "Image intensity noise used for e.g. tracking weight calculation. Sould be set larger than the actual sensor-noise, to also account for noise originating from discretization / linear interpolation.", "", &LSDParamsConfig::cameraPixelNoise)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("cameraPixelNoise", "double", 0, "Image intensity noise used for e.g. tracking weight calculation. Sould be set larger than the actual sensor-noise, to also account for noise originating from discretization / linear interpolation.", "", &LSDParamsConfig::cameraPixelNoise)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.KFUsageWeight = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.KFUsageWeight = 20.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.KFUsageWeight = 4.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("KFUsageWeight", "double", 0, "Determines how often Keyframes are taken, depending on the Overlap to the current Keyframe. Larger -> more Keyframes.", "", &LSDParamsConfig::KFUsageWeight)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("KFUsageWeight", "double", 0, "Determines how often Keyframes are taken, depending on the Overlap to the current Keyframe. Larger -> more Keyframes.", "", &LSDParamsConfig::KFUsageWeight)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.KFDistWeight = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.KFDistWeight = 20.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.KFDistWeight = 3.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("KFDistWeight", "double", 0, "Determines how often Keyframes are taken, depending on the Distance to the current Keyframe. Larger -> more Keyframes.", "", &LSDParamsConfig::KFDistWeight)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("KFDistWeight", "double", 0, "Determines how often Keyframes are taken, depending on the Distance to the current Keyframe. Larger -> more Keyframes.", "", &LSDParamsConfig::KFDistWeight)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.doSLAM = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.doSLAM = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.doSLAM = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("doSLAM", "bool", 0, "Toggle Global Mapping Component on/off. Only takes effect after a reset.", "", &LSDParamsConfig::doSLAM)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("doSLAM", "bool", 0, "Toggle Global Mapping Component on/off. Only takes effect after a reset.", "", &LSDParamsConfig::doSLAM)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.doKFReActivation = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.doKFReActivation = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.doKFReActivation = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("doKFReActivation", "bool", 0, "Toggle Keyframe Re-Activation on/off: If close to an existing keyframe, re-activate it instead of creating a new one. If false, Map will continually grow even if the camera moves in a relatively constrained area; If false, the number of keyframes will not grow arbitrarily.", "", &LSDParamsConfig::doKFReActivation)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("doKFReActivation", "bool", 0, "Toggle Keyframe Re-Activation on/off: If close to an existing keyframe, re-activate it instead of creating a new one. If false, Map will continually grow even if the camera moves in a relatively constrained area; If false, the number of keyframes will not grow arbitrarily.", "", &LSDParamsConfig::doKFReActivation)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.doMapping = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.doMapping = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.doMapping = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("doMapping", "bool", 0, "Toggle entire Keyframe Creating / Update module on/off: If false, only the Tracking Component stays active, which will prevent rapid motion or moving objects from corrupting the map.", "", &LSDParamsConfig::doMapping)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("doMapping", "bool", 0, "Toggle entire Keyframe Creating / Update module on/off: If false, only the Tracking Component stays active, which will prevent rapid motion or moving objects from corrupting the map.", "", &LSDParamsConfig::doMapping)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.useFabMap = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.useFabMap = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.useFabMap = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("useFabMap", "bool", 0, "Use OpenFABMAP to find large loop-closures. Only takes effect after a reset, and requires LSD-SLAM to be compiled with FabMap.", "", &LSDParamsConfig::useFabMap)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("useFabMap", "bool", 0, "Use OpenFABMAP to find large loop-closures. Only takes effect after a reset, and requires LSD-SLAM to be compiled with FabMap.", "", &LSDParamsConfig::useFabMap)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.allowNegativeIdepths = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.allowNegativeIdepths = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.allowNegativeIdepths = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("allowNegativeIdepths", "bool", 0, "Allow idepth to be (slightle) negative, to avoid introducing a bias for far-away points.", "", &LSDParamsConfig::allowNegativeIdepths)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("allowNegativeIdepths", "bool", 0, "Allow idepth to be (slightle) negative, to avoid introducing a bias for far-away points.", "", &LSDParamsConfig::allowNegativeIdepths)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.useSubpixelStereo = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.useSubpixelStereo = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.useSubpixelStereo = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("useSubpixelStereo", "bool", 0, "Compute subpixel-accurate stereo disparity.", "", &LSDParamsConfig::useSubpixelStereo)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("useSubpixelStereo", "bool", 0, "Compute subpixel-accurate stereo disparity.", "", &LSDParamsConfig::useSubpixelStereo)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.useAffineLightningEstimation = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.useAffineLightningEstimation = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.useAffineLightningEstimation = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("useAffineLightningEstimation", "bool", 0, "EXPERIMENTAL: Correct for global affine intensity changes during tracking. Might help if you have Problems with Auto-Exposure.", "", &LSDParamsConfig::useAffineLightningEstimation)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("useAffineLightningEstimation", "bool", 0, "EXPERIMENTAL: Correct for global affine intensity changes during tracking. Might help if you have Problems with Auto-Exposure.", "", &LSDParamsConfig::useAffineLightningEstimation)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.multiThreading = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.multiThreading = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.multiThreading = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("multiThreading", "bool", 0, "Toggle Multi-Threading of DepthMap Estimation. Disable for less CPU usage, but possibly slightly less quality.", "", &LSDParamsConfig::multiThreading)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<bool>("multiThreading", "bool", 0, "Toggle Multi-Threading of DepthMap Estimation. Disable for less CPU usage, but possibly slightly less quality.", "", &LSDParamsConfig::multiThreading)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.maxLoopClosureCandidates = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.maxLoopClosureCandidates = 50;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.maxLoopClosureCandidates = 10;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<int>("maxLoopClosureCandidates", "int", 0, "Maximal of Loop-Closures that are tracked initially for each new keyframe.", "", &LSDParamsConfig::maxLoopClosureCandidates)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<int>("maxLoopClosureCandidates", "int", 0, "Maximal of Loop-Closures that are tracked initially for each new keyframe.", "", &LSDParamsConfig::maxLoopClosureCandidates)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.loopclosureStrictness = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.loopclosureStrictness = 100.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.loopclosureStrictness = 1.5;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("loopclosureStrictness", "double", 0, "Threshold on reciprocal loop-closure consistency check, to be added to the map. Larger -> more (possibly wrong) Loopclosures.", "", &LSDParamsConfig::loopclosureStrictness)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("loopclosureStrictness", "double", 0, "Threshold on reciprocal loop-closure consistency check, to be added to the map. Larger -> more (possibly wrong) Loopclosures.", "", &LSDParamsConfig::loopclosureStrictness)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.relocalizationTH = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.relocalizationTH = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.relocalizationTH = 0.7;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("relocalizationTH", "double", 0, "How good a relocalization-attempt has to be, to be accepted. Larger -> More Strict.", "", &LSDParamsConfig::relocalizationTH)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("relocalizationTH", "double", 0, "How good a relocalization-attempt has to be, to be accepted. Larger -> More Strict.", "", &LSDParamsConfig::relocalizationTH)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.depthSmoothingFactor = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.depthSmoothingFactor = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.depthSmoothingFactor = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("depthSmoothingFactor", "double", 0, "How much to smooth the depth map. Larger -> Less Smoothing", "", &LSDParamsConfig::depthSmoothingFactor)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LSDParamsConfig::AbstractParamDescriptionConstPtr(new LSDParamsConfig::ParamDescription<double>("depthSmoothingFactor", "double", 0, "How much to smooth the depth map. Larger -> Less Smoothing", "", &LSDParamsConfig::depthSmoothingFactor)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(LSDParamsConfig::AbstractGroupDescriptionConstPtr(new LSDParamsConfig::GroupDescription<LSDParamsConfig::DEFAULT, LSDParamsConfig>(Default)));
//#line 366 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<LSDParamsConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<LSDParamsConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<LSDParamsConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    LSDParamsConfig __max__;
    LSDParamsConfig __min__;
    LSDParamsConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const LSDParamsConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static LSDParamsConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &LSDParamsConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const LSDParamsConfig &LSDParamsConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const LSDParamsConfig &LSDParamsConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const LSDParamsConfig &LSDParamsConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<LSDParamsConfig::AbstractParamDescriptionConstPtr> &LSDParamsConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<LSDParamsConfig::AbstractGroupDescriptionConstPtr> &LSDParamsConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const LSDParamsConfigStatics *LSDParamsConfig::__get_statics__()
  {
    const static LSDParamsConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = LSDParamsConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __LSDPARAMSRECONFIGURATOR_H__
